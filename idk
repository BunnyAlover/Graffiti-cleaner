import paho.mqtt.client as mqtt
import time

# Определение состояний
STATE_WAIT = "Ожидание"
STATE_TURN = "Поворот"
STATE_DRIVE = "Езда прямо"
STATE_ARRIVED = "Финиш"
STATE_STOPPED = "Остановка"

# Порог дистанции до цели (например, 20 см)
DISTANCE_THRESHOLD = 20

class RobotFSM:
    def __init__(self, mqtt_client):
        self.state = STATE_WAIT
        self.client = mqtt_client
        self.distance_to_target = 100  # Изначально далеко

    def start(self):
        if self.state == STATE_WAIT:
            print("[FSM] Получена команда START. Начинаем движение.")
            self.transition_to(STATE_TURN)

    def stop(self):
        print("[FSM] Получена команда STOP. Остановка робота.")
        self.transition_to(STATE_STOPPED)
        self.send_robot_command("stop")

    def transition_to(self, new_state):
        print(f"[FSM] Переход: {self.state} -> {new_state}")
        self.state = new_state
        self.handle_state()

    def handle_state(self):
        if self.state == STATE_TURN:
            if self.distance_to_target > DISTANCE_THRESHOLD:
                self.send_robot_command("right 2000")  # Поворот направо 2 сек
                time.sleep(2)
                self.transition_to(STATE_DRIVE)
            else:
                self.transition_to(STATE_ARRIVED)

        elif self.state == STATE_DRIVE:
            if self.distance_to_target > DISTANCE_THRESHOLD:
                self.send_robot_command("forward 5000")  # Вперёд 5 сек
                time.sleep(5)
                # имитируем уменьшение расстояния
                self.distance_to_target -= 30  
                if self.distance_to_target < DISTANCE_THRESHOLD:
                    self.transition_to(STATE_ARRIVED)
                else:
                    self.transition_to(STATE_TURN)
            else:
                self.transition_to(STATE_ARRIVED)

        elif self.state == STATE_ARRIVED:
            print("[FSM] Робот достиг цели!")
            self.send_robot_command("stop")
            self.transition_to(STATE_WAIT)

        elif self.state == STATE_STOPPED:
            self.send_robot_command("stop")

    def send_robot_command(self, command):
        print(f"[FSM] Отправка команды роботу: {command}")
        self.client.publish("robot/command", command)

# Колбэк на получение MQTT-сообщений
def on_message(client, userdata, message):
    command = message.payload.decode()
    print(f"[MQTT] Получена команда: {command}")
    if command == "start":
        fsm.start()
    elif command == "stop":
        fsm.stop()

# Настройка MQTT
mqtt_client = mqtt.Client()
mqtt_client.on_message = on_message

mqtt_client.connect("mqtt_broker_address")  # Здесь IP или домен брокера
mqtt_client.subscribe("robot/control")
mqtt_client.loop_start()

# Создание конечного автомата
fsm = RobotFSM(mqtt_client)

print("[Server] Сервер запущен и готов принимать команды...")

# Бесконечный цикл работы
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("\n[Server] Выключение сервера.")
    mqtt_client.loop_stop()
    mqtt_client.disconnect()
